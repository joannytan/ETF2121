{
  "hash": "58887f3a36baac9977240bf7850ea00c",
  "result": {
    "markdown": "---\ntitle: \"Lecture Note 1\"\nfilters: \n  - webr\nexecute: \n  echo: false\n---\n\n\n::: callout-note\nLearning Objective:\n:::\n\n\n\n\n\n## Introduction to Data Analysis\n\n## Introduction to R Language\n\n### What is R?\n\nR is a programming language and free software environment for statistical computing and graphics supported by the R Foundation for Statistical Computing. The R language is widely used among statisticians and data miners for developing statistical software and data analysis.\n\n### Why R?\n\n-   R is open-source and free\n-   R is a powerful tool for data analysis\n-   R has a large and active community\n-   R has a large number of packages for data analysis\n-   R is a programming language and can be used for automating data analysis tasks\n-   R is a great tool for reproducible research\n\n### RStudio\n\nRsudio is an integrated development environment (IDE) for R. It includes a console, syntax-highlighting editor that supports direct code execution, as well as tools for plotting, history, debugging and workspace management.\n\n### Basic of R\n\n#### R as a Calculator\n\n```{webr-r}\n# Addition\n2 + 3\n\n# Subtraction\n5 - 3\n\n# Multiplication\n2 * 3\n\n# Division\n6 / 3\n\n# Exponentiation\n2 ^ 3\n```\n\n#### R Objects\n\nIn R, everything is an object. These objects serve as containers for various types of data. Whether you’re dealing with a single number, a character string (like a word), or a complex structure like the output of a plot or a statistical analysis summary, it’s all represented as an object.\n\n**Creating Objects:**\n\nTo create an object, you simply give it a name. For instance\n\n```{webr-r}\nx <- 5\n```\n\nIn this example, an object is created called `x` and it is assigned the value `5`. The `<-` is the assignment operator. It assigns the value on the right to the object on the left. You can also use `=` to assign values to objects, but it's considered bad practice.\n\n**Viewing Objects:**\n\nTo view the value of an object, you simply type the name of the object and press enter. For instance:\n\n```{webr-r}\nx\n```\n\nR keeps track of all objects in the current workspace during the session. You can see all the objects in the current workspace by typing `ls()` in the console.\n\n**Opearations with Objects:**\n\nYou can perform operations with objects. For instance:\n\n```{webr-r}\ny <- 3\nz <- x + y\n\nz\n```\n\n**Objects names:**\n\nObject names can contain letters, numbers, periods, and underscores. However, they can only starts with letters or underscore and nothing else. They are case-sensitive, so `x` and `X` are different objects. They cannot start with a number or a period. If you would like to insist to have numbers or period as the first character, you can use backticks to define the object name. It is called nonsyntactic names. For instance, you can define the following:\n\n```{webr-r}\n`1x` <- 10\n`1x`\n```\n\n**Exercises:**\n\n```{webr-r}\n\n```\n\n1.  Create an object called `a` and assign the value `10` to it.\n2.  Create an object called `b` and assign the value `20` to it.\\\n3.  Create an object called `star` and assign the value `a + b` to it.\n4.  View the value of `star`.\n5.  Which of the following is not the syntactic name for an object?\n    -   `x`\n    -   `X`\n    -   `1x`\n    -   `x1`\n    -   `x.y`\n    -   `x_y`\n\n#### Data Types\n\nR has several data types. The most common data types are:\n\n1.  Numeric (double)\n\n-   represents eal numbers (e.g., 3.14, 0.0001, 1000.0).\n-   can be positive or negative.\n-   can be in scientific notation (e.g., 1.23e-5).\n-   used for continuous data like measurements, weights, heights, etc.\n\n2.  Character\n\n-   represents text data (e.g., \"hello\", \"world\", \"R is fun\").\n-   must be enclosed in quotes.\n-   used for categorical data (e.g., \"High School\", \"Primary School\", \"University\").\n\n3.  Logical (boolean)\n\n-   represents binary data (e.g., TRUE or FALSE).\n-   used for logical operations.\n\n4.  Integer\n\n-   represents whole numbers (e.g., 1, 2, 3, 1000).\n-   can be positive or negative.\n-   used for counting data like number of students, number of cars, etc.\n-   sometimes you will see it ends with `L` (e.g., 1L, 2L, 3L, 1000L). This is to indicate that the number is an integer.\n\n5.  Factors\n\n-   represents categorical data (e.g., \"High School\", \"Primary School\", \"University\").\n-   used for categorical data.\n\n6.  Complex\n\n-   represents complex numbers (e.g., 1 + 2i, 3 + 4i, 5 + 6i).\n-   used for complex data like electrical engineering, physics, etc.\n\nHowever, we seldom deal with complex data types. We will focus on the first four data types.\n\n**Exercises:**\n\n```{webr-r}\n\n```\n\n1.  What is the data type of `3.14`?\n2.  What is the data type of `\"hello\"`?\n3.  What is the data type of `TRUE`?\n4.  What is the data type of `1L`?\n5.  What is the data type of `factor(\"High School\")`?\n6.  What is the data type of `1 + 2i`?\n7.  What is the data type of `\"1\"`?\n\nNote: You can check your answers using `typeof()` function.\n\n#### Functions\n\nA function is a block of code that performs a specific task. R has a large number of in-built functions and also allows users to define their own functions. We will learn more about how to create functions in the coming weeks. But so far, we will use some of the in-built functions. Anything that starts with `(` and end with `)` is a function.\n\n**Exercises:**\n\nDefine which one is a function below:\n\n1.  `mean()`\n2.  `median`\n3.  `sd()`\n4.  `var()`\n5.  `sum[]`\n\n#### Vectors\n\n#### Data Frames\n\n#### Packages\n\nR packages are collections of functions and data sets developed by the community. They increase the power of R by improving existing base R functionalities, or by adding new ones.\n\n**Exercises**:\n\n1.  Install `tidyverse` package. Explain what do you observe from the console.\n2.  Load the `tidyverse` package. Explain what do you observe from the console.\n3.  Install `palmerpenguins` package. Explain what do you observe from the console.\n4.  Load the `palmerpenguins` package. Explain what do you observe from the console.\n5.  Load the `lmer` package. Explain what do you observe from the console.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}